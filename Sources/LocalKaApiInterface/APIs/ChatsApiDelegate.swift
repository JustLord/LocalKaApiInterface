import Vapor
// ChatsApiDelegate.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: /APIs.Chats


public enum chatsGetResponse: AsyncResponseEncodable {
  case http200([Chat])

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }

  public func encodeResponse(for request: Request) async throws -> Response {
    switch self {
    case .http200(let content):
      var response = try await content.encodeResponse(for: request)
      response.status = HTTPStatus(statusCode: 200)
      return response
    }
  }
}


public enum chatsPostResponse: AsyncResponseEncodable {
  case http200(Chat)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }

  public func encodeResponse(for request: Request) async throws -> Response {
    switch self {
    case .http200(let content):
      var response = try await content.encodeResponse(for: request)
      response.status = HTTPStatus(statusCode: 200)
      return response
    }
  }
}


public enum usersUsernameDirectGetResponse: AsyncResponseEncodable {
  case http200(Chat)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }

  public func encodeResponse(for request: Request) async throws -> Response {
    switch self {
    case .http200(let content):
      var response = try await content.encodeResponse(for: request)
      response.status = HTTPStatus(statusCode: 200)
      return response
    }
  }
}

public protocol ChatsApiDelegate: AnyObject {
  associatedtype AuthType
  /**
  GET /chats */
  func chatsGet(with req: Request, asAuthenticated user: AuthType) async throws -> chatsGetResponse
  /**
  POST /chats */
  func chatsPost(with req: Request, asAuthenticated user: AuthType, body: CreateChatBody) async throws -> chatsPostResponse
  /**
  GET /users/{username}/direct */
  func usersUsernameDirectGet(with req: Request, asAuthenticated user: AuthType, username: String) async throws -> usersUsernameDirectGetResponse
}
